<html>

<head>
<meta charset="utf-8">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Style Definitions */
h3
	{margin-bottom:0cm;}
table, th, td
	{border: 1px solid black;  border-collapse: collapse;  padding: 5px;}
table, td, p
  {text-align: center;}
-->
</style>
<!--script src="https://unpkg.com/petite-vue" defer init></script-->
</head>

<body lang=DE>
<div v-scope="{}">

<a href="/log">show log</a>
<a href="/log/on">log on</a>
<a href="/log/off">log off</a>
<a href="/info">info</a>
<a href="/errors.txt">error</a>

<div>

<h2>file update and distribution</h2>

<p>&nbsp;</p>

<p>&nbsp;</p>
</div>

<table border-spacing="10px">
 <tr>
  <th width=95 >
  <p>File Name</p>
  </th>
  <th width=66 v-for="(v, k) in app1.other">
  <p><a v-bind:href="'http://'+k+'/index.htm'">{{ k }} {{ v.desc }}</a></p>
  </th>
 </tr>
 <tr v-for="(value, key) in app1.files">
  <th width=95>
  <p>{{ key }}</p>
  </th>
  <!--td width=89>
  <p align=right>{{ value.size }}</p>
  </td>
  <td width=68>
  <p align=right>{{ value.version }}</p>
  </td-->
  <td width=66  v-for="(v, k) in app1.other" v-bind:bgcolor="app1.other[k].valid?((app1.other[k].data[key].version < app1.files[key])?'#ffaaaa':'#aaffaa'):((app1.other[k].data[key].version < app1.files[key])?'#cc8888':'#88cc88')">
  <p align=right><span>{{ app1.other[k].data[key].version }}</span></p>
  </td>
 </tr>
</table>



<p>&nbsp;</p>
{{app1.other}}
<p>&nbsp;</p>

{{ app1.files }}&nbsp;
<p>&nbsp;</p>

{{ app1.hosts }}&nbsp;
<p>&nbsp;</p>

{{ app1.config1 }}&nbsp;
<br>
</div>


<script type="module">
import { createApp, reactive } from 'https://unpkg.com/petite-vue?module'

const app1 = reactive({

    data: {},

    getJSON(url, callback) {

        var xhr = new XMLHttpRequest();
        xhr.addEventListener('error', callback);
        xhr.addEventListener('timeout', callback);
        xhr.timeout = 7000;
        xhr.open('GET', url, true);
        xhr.responseType = 'json';

        xhr.onload = function() {

            var status = xhr.status;

            if (status == 200) {
                callback(null, xhr.response);
            } else {
                callback(status);
            }
        };

        xhr.send();
    },

    loadData() {
      function getData(ip, description) {
        app1.getJSON(`http://${ip}/download/FileDistState.json`,  function(err, data1) {

          if (err) {
            if (! app1.other[ip]) {
              app1.other[ip] = {desc: description}
            }
            console.error(err);
            app1.other[ip].valid = false;
            
          } else {
            app1.other[ip] = { desc: description, data: data1, valid: true }
            for (const fileName in data1) {
              if (! app1.files[fileName]) {
                app1.files[fileName] = data1[fileName].version
              } else {
                app1.files[fileName] = Math.max(app1.files[fileName], data1[fileName].version)
              }
            }
          }
        })
      }

      for (const ip in app1.hosts) {
        getData(ip, app1.hosts[ip])
      }
    },

    loadConfig(){
      app1.getJSON(configUrl,  function(err, data1) {

        if (err) {
          console.error(err);
          
        } else {
          app1.config1 = data1.devices
        }
      })
    },

    loadIps(){
        if (! app1.config1) {
            app1.loadConfig();
            return;
        }
        app1.getJSON(ipsUrl,  function(err, data1) {

        if (err) {
          console.error(err);
          
        } else {
          app1.hosts = data1
          for (const ip in data1) {
            if (!!app1.config1[data1[ip]]) {
              app1.hosts[ip] = app1.config1[data1[ip]].name
            }
          }
        }
      })
    }
  }
)

 createApp({
    // share it with app scopes
    app1
  }).mount()

var ipsUrl = '/knownIps'
var configUrl = '/download/config.json'
if ( window.location.href.startsWith('file')) {
  ipsUrl = 'http://192.168.126.223' + ipsUrl
  configUrl = 'http://192.168.126.223' + configUrl
}


app1.other = {}
app1.files = {}
window.setInterval(() => app1.loadData(), 5000);
window.setInterval(() => app1.loadIps(), 19700);

window.onload = () => { 
  app1.loadConfig();
  window.setTimeout(() => app1.loadIps(), 2000);
  window.setTimeout(() => app1.loadData(), 3500);
}

</script>
</body>

</html>
